import { AgentFactory } from '../agents/agent-factory.js';
import { TravelSearchTool } from '../tools/tavily-search.js';
import { TRAVEL_CATEGORIES } from '../types/index.js';

/**
 * Graph nodes for the travel chatbot workflow
 */

// Initialize tools and agents
const travelAgent = AgentFactory.createTravelAgent();
const searchTool = new TravelSearchTool();

/**
 * Node: Analyze user query
 * Extracts intent, category, and location from user input
 */
export async function analyzeQuery(state) {
  try {
    const userMessage = state.messages[state.messages.length - 1];
    const query = userMessage.content;
    const conversationHistory = state.conversationHistory || [];

    // Analyze the query using the travel agent with conversation context
    const analysis = await travelAgent.analyzeQuery(query, conversationHistory);

    return {
      ...state,
      currentQuery: {
        original: query,
        ...analysis
      },
      analysisResult: analysis
    };

  } catch (error) {
    console.error('‚ùå Error in analyzeQuery node:', error);

    // Check if it's a non-travel query
    if (error.message.includes('not travel-related')) {
      return {
        ...state,
        error: 'non_travel_query',
        finalResponse: `T√¥i l√† tr·ª£ l√Ω du l·ªãch chuy√™n bi·ªát v√† ch·ªâ c√≥ th·ªÉ gi√∫p ƒë·ª° c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn du l·ªãch.

Vui l√≤ng h·ªèi t√¥i v·ªÅ:
üçΩÔ∏è **·∫®m th·ª±c & Nh√† h√†ng**: Nh√† h√†ng, m√≥n ƒÉn ƒë·ªãa ph∆∞∆°ng, g·ª£i √Ω ·∫©m th·ª±c
üè® **Ch·ªó ·ªü**: Kh√°ch s·∫°n, nh√† ngh·ªâ, cho thu√™ k·ª≥ ngh·ªâ
üó∫Ô∏è **ƒêi·ªÉm tham quan**: ƒê·ªãa ƒëi·ªÉm du l·ªãch, ho·∫°t ƒë·ªông, tham quan
üå§Ô∏è **Th·ªùi ti·∫øt**: ƒêi·ªÅu ki·ªán hi·ªán t·∫°i, d·ª± b√°o cho ƒëi·ªÉm ƒë·∫øn
üöó **Ph∆∞∆°ng ti·ªán di chuy·ªÉn**: Di chuy·ªÉn, giao th√¥ng c√¥ng c·ªông, tuy·∫øn ƒë∆∞·ªùng

V√≠ d·ª•: "Nh√† h√†ng ph·ªü ngon nh·∫•t ·ªü H√† N·ªôi" ho·∫∑c "Kh√°ch s·∫°n g·∫ßn ch·ª£ B·∫øn Th√†nh"`
      };
    }

    // For other analysis errors, ask for clarification
    return {
      ...state,
      error: 'unclear_query',
      finalResponse: `T√¥i kh√¥ng th·ªÉ hi·ªÉu r√µ c√¢u h·ªèi du l·ªãch c·ªßa b·∫°n.

B·∫°n c√≥ th·ªÉ c·ª• th·ªÉ h∆°n kh√¥ng? V√≠ d·ª•:
‚Ä¢ Bao g·ªìm ƒëi·ªÉm ƒë·∫øn/ƒë·ªãa ƒëi·ªÉm b·∫°n ƒëang h·ªèi v·ªÅ
‚Ä¢ Ch·ªâ r√µ lo·∫°i th√¥ng tin b·∫°n c·∫ßn (nh√† h√†ng, kh√°ch s·∫°n, ƒëi·ªÉm tham quan, v.v.)
‚Ä¢ Chi ti·∫øt h∆°n v·ªÅ nh·ªØng g√¨ b·∫°n mu·ªën bi·∫øt

Th·ª≠ h·ªèi nh∆∞: "Nh√† h√†ng sushi ngon nh·∫•t ·ªü Tokyo" ho·∫∑c "Th·ªùi ti·∫øt Paris tu·∫ßn n√†y"`
    };
  }
}

/**
 * Node: Decide if search is needed
 * Determines whether to search for information or provide a direct response
 */
export async function decideSearchNeeded(state) {
  try {
    const { currentQuery } = state;

    // Categories that typically need real-time search
    const searchRequiredCategories = [
      TRAVEL_CATEGORIES.FOOD,
      TRAVEL_CATEGORIES.ACCOMMODATION,
      TRAVEL_CATEGORIES.ATTRACTIONS,
      TRAVEL_CATEGORIES.WEATHER,
      TRAVEL_CATEGORIES.TRANSPORTATION
    ];

    // Check if search is needed based on category and query content
    const needsSearch = searchRequiredCategories.includes(currentQuery.category) ||
                       currentQuery.urgency === 'high' ||
                       currentQuery.location ||
                       (currentQuery.keywords && currentQuery.keywords.some(keyword =>
                         ['current', 'latest', 'now', 'today', 'price', 'open', 'hours'].includes(keyword.toLowerCase())
                       ));

    return {
      ...state,
      needsSearch: needsSearch
    };

  } catch (error) {
    console.error('‚ùå Error in decideSearchNeeded node:', error);
    return {
      ...state,
      error: `Decision failed: ${error.message}`,
      needsSearch: true // Default to search on error
    };
  }
}

/**
 * Node: Search for information
 * Uses Tavily to search for real-time travel information
 */
export async function searchInformation(state) {
  try {
    const { currentQuery } = state;

    // Perform travel-specific search
    const searchResults = await searchTool.searchTravel(
      currentQuery.searchQuery || currentQuery.original,
      currentQuery.category,
      currentQuery.location
    );



    return {
      ...state,
      searchResults
    };

  } catch (error) {
    console.error('‚ùå Error in searchInformation node:', error);
    return {
      ...state,
      error: `Search failed: ${error.message}`,
      searchResults: []
    };
  }
}

/**
 * Node: Generate response
 * Creates the final response using search results or direct knowledge
 */
export async function generateResponse(state) {
  try {
    const { currentQuery, searchResults, needsSearch } = state;
    let response;

    if (needsSearch && searchResults && searchResults.length > 0) {
      // Generate response based on search results
      response = await travelAgent.generateResponse(
        currentQuery.original,
        searchResults
      );
    } else if (needsSearch && (!searchResults || searchResults.length === 0)) {
      // Handle case where search was needed but no results found
      response = await travelAgent.generateSimpleResponse(currentQuery.original);
      response += "\n\n‚ö†Ô∏è T√¥i kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin hi·ªán t·∫°i v·ªÅ ch·ªß ƒë·ªÅ n√†y. Ph·∫£n h·ªìi tr√™n d·ª±a tr√™n ki·∫øn th·ª©c chung.";
    } else {
      // Generate simple response without search
      response = await travelAgent.generateSimpleResponse(currentQuery.original);
    }

    return {
      ...state,
      finalResponse: response
    };

  } catch (error) {
    console.error('‚ùå Error in generateResponse node:', error);
    return {
      ...state,
      error: `Response generation failed: ${error.message}`,
      finalResponse: "Xin l·ªói, t√¥i ƒëang g·∫∑p kh√≥ khƒÉn trong vi·ªác t·∫°o ph·∫£n h·ªìi ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i."
    };
  }
}

/**
 * Node: Check for follow-up
 * Determines if the user might need additional information
 */
export async function checkFollowUp(state) {
  try {
    const { currentQuery, searchResults } = state;

    // Simple heuristics for determining if follow-up might be helpful
    let needsMoreInfo = false;

    // Check if the query was very broad
    if (currentQuery.category === TRAVEL_CATEGORIES.GENERAL &&
        (!currentQuery.keywords || currentQuery.keywords.length < 3)) {
      needsMoreInfo = true;
    }

    // Check if search results were limited
    if (searchResults && searchResults.length < 2) {
      needsMoreInfo = true;
    }

    // Check if no location was specified for location-dependent queries
    if ([TRAVEL_CATEGORIES.FOOD, TRAVEL_CATEGORIES.ACCOMMODATION, TRAVEL_CATEGORIES.ATTRACTIONS]
        .includes(currentQuery.category) && !currentQuery.location) {
      needsMoreInfo = true;
    }

    return {
      ...state,
      needsMoreInfo
    };

  } catch (error) {
    console.error('‚ùå Error in checkFollowUp node:', error);
    return {
      ...state,
      needsMoreInfo: false
    };
  }
}

/**
 * Node: Handle errors
 * Provides error handling and recovery
 */
export async function handleError(state) {
  const errorType = state.error;

  // If we already have a finalResponse from error handling, use it
  if (state.finalResponse) {
    return {
      ...state,
      error: null // Clear the error after handling
    };
  }

  // Handle unexpected errors
  const fallbackResponse = `Xin l·ªói, t√¥i g·∫∑p ph·∫£i s·ª± c·ªë k·ªπ thu·∫≠t kh√¥ng mong mu·ªën.

Vui l√≤ng th·ª≠:
‚Ä¢ Di·ªÖn ƒë·∫°t l·∫°i c√¢u h·ªèi du l·ªãch c·ªßa b·∫°n
‚Ä¢ C·ª• th·ªÉ h∆°n v·ªÅ ƒë·ªãa ƒëi·ªÉm v√† nh·ªØng g√¨ b·∫°n c·∫ßn
‚Ä¢ H·ªèi v·ªÅ nh√† h√†ng, kh√°ch s·∫°n, ƒëi·ªÉm tham quan, th·ªùi ti·∫øt ho·∫∑c ph∆∞∆°ng ti·ªán di chuy·ªÉn

T√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n l·∫≠p k·∫ø ho·∫°ch du l·ªãch! üß≥`;

  return {
    ...state,
    finalResponse: fallbackResponse,
    error: null // Clear the error after handling
  };
}
